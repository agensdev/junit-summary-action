// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`writeSummary should write the summary correctly, failing variation 1, no screenshots 1`] = `
Summary {
  "_buffer": "<h1>Test results</h1>
<h2>Summary</h2>
<table><tr><td><strong>Overall result</strong></td><td>‚ùå</td></tr><tr><td><strong>Total fails</strong></td><td>1</td></tr><tr><td><strong>Total skipped</strong></td><td>0</td></tr><tr><td><strong>Total tests</strong></td><td>4</td></tr></table>
<h2>Failing tests</h2>
<table><tr><td><h3 id='lottery results-lottery results'><a href="#lottery results-lottery results">üîó</a> <code>Lottery results - Lottery results</code></h3></td></tr><tr><td><code>Assertion is false: "Hver tirsdag og fredag!" is visible</code></td></tr></table>
<h2>Hjem</h2>
<h3>Profil Name</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td>Profil Name</td><td>11.0 s</td><td>‚úÖ</td></tr></table>
<h3>Nabolaget - Address is shown</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td>Nabolaget - Address is shown</td><td>14.0 s</td><td>‚úÖ</td></tr></table>
<h3>Lottery results</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td><a href="#lottery results-lottery results">Lottery results</a></td><td>69.0 s</td><td>‚ùå</td></tr></table>
<h3>Eurojackpot - Andelsbank feature toggle</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td>Eurojackpot - Andelsbank feature toggle</td><td>18.0 s</td><td>‚úÖ</td></tr></table>
",
  "write": [MockFunction] {
    "calls": [
      [
        {
          "overwrite": true,
        },
      ],
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": Promise {},
      },
      {
        "type": "return",
        "value": Promise {},
      },
    ],
  },
}
`;

exports[`writeSummary should write the summary correctly, failure, no screenshots 1`] = `
Summary {
  "_buffer": "<h1>Test results</h1>
<h2>Summary</h2>
<table><tr><td><strong>Overall result</strong></td><td>‚ùå</td></tr><tr><td><strong>Total fails</strong></td><td>1</td></tr><tr><td><strong>Total skipped</strong></td><td>0</td></tr><tr><td><strong>Total tests</strong></td><td>1</td></tr></table>
<h2>Failing tests</h2>
<table><tr><td><h3 id='exampleuitests-testexample'><a href="#exampleuitests-testexample">üîó</a> <code>ExampleUITests - testExample</code></h3></td></tr><tr><td><code>XCTAssertEqual failed: ("expected result") is not equal to ("unexpected result") (/path/to/test.swift#CharacterRangeLen=0&EndingLineNumber=15&StartingLineNumber=15)</code></td></tr></table>
<h2>ExampleTests</h2>
<h3>ExampleUITests</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td><a href="#exampleuitests-testexample">testExample</a></td><td>10.8 s</td><td>‚ùå</td></tr></table>
",
  "write": [MockFunction] {
    "calls": [
      [
        {
          "overwrite": true,
        },
      ],
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": Promise {},
      },
      {
        "type": "return",
        "value": Promise {},
      },
    ],
  },
}
`;

exports[`writeSummary should write the summary correctly, failure, with screenshots 1`] = `
Summary {
  "_buffer": "<h1>Test results</h1>
<h2>Summary</h2>
<table><tr><td><strong>Overall result</strong></td><td>‚ùå</td></tr><tr><td><strong>Total fails</strong></td><td>1</td></tr><tr><td><strong>Total skipped</strong></td><td>0</td></tr><tr><td><strong>Total tests</strong></td><td>1</td></tr></table>
<h2>Failing tests</h2>
<table><tr><td><h3 id='exampleuitests-testexample'><a href="#exampleuitests-testexample">üîó</a> <code>ExampleUITests - testExample</code></h3></td></tr><tr><td><code>XCTAssertEqual failed: ("expected result") is not equal to ("unexpected result") (/path/to/test.swift#CharacterRangeLen=0&EndingLineNumber=15&StartingLineNumber=15)</code></td></tr></table>
<img src="https://url.to/img" alt="">
<h2>ExampleTests</h2>
<h3>ExampleUITests</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td><a href="#exampleuitests-testexample">testExample</a></td><td>10.8 s</td><td>‚ùå</td></tr></table>
",
  "write": [MockFunction] {
    "calls": [
      [
        {
          "overwrite": true,
        },
      ],
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": Promise {},
      },
      {
        "type": "return",
        "value": Promise {},
      },
    ],
  },
}
`;

exports[`writeSummary should write the summary correctly, success, no screenshots 1`] = `
Summary {
  "_buffer": "<h1>Test results</h1>
<h2>Summary</h2>
<table><tr><td><strong>Overall result</strong></td><td>‚úÖ</td></tr><tr><td><strong>Total fails</strong></td><td>0</td></tr><tr><td><strong>Total skipped</strong></td><td>0</td></tr><tr><td><strong>Total tests</strong></td><td>4</td></tr></table>
<h2>uploadScreenshots</h2>
<h3>uploadScreenshots throws an error if the Firebase service account is missing</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td>uploadScreenshots throws an error if the Firebase service account is missing</td><td>0.0 s</td><td>‚úÖ</td></tr></table>
<h3>uploadScreenshots successfully uploads screenshots and returns download URLs</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td>uploadScreenshots successfully uploads screenshots and returns download URLs</td><td>0.0 s</td><td>‚úÖ</td></tr></table>
<h2>writeSummary</h2>
<h3>writeSummary should write the summary correctly, no screenshots</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td>writeSummary should write the summary correctly, no screenshots</td><td>0.0 s</td><td>‚úÖ</td></tr></table>
<h3>writeSummary should write the summary correctly, with screenshots</h3>
<table><tr><th>Test name</th><th>Time elapsed</th><th>Result</th></tr><tr><td>writeSummary should write the summary correctly, with screenshots</td><td>0.0 s</td><td>‚úÖ</td></tr></table>
",
  "write": [MockFunction] {
    "calls": [
      [
        {
          "overwrite": true,
        },
      ],
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": Promise {},
      },
      {
        "type": "return",
        "value": Promise {},
      },
    ],
  },
}
`;
